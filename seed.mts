import { SnapletClient } from "@snaplet/seed";
import { copycat } from "@snaplet/copycat";

// This is a basic example generated by Snaplet to start you off, check out the docs for where to go from here
// * For more on getting started with @snaplet/seed: https://docs.snaplet.dev/getting-started/quick-start/seed
// * For a more detailed reference: https://docs.snaplet.dev/core-concepts/seed
const snaplet = new SnapletClient({
  dryRun: process.env.DRY !== "0",
  models: {
    buckets: {
      data: {
        avif_autodetection: true,
        file_size_limit: undefined,
        allowed_mime_types: undefined,
      },
    },
    objects: {
      data: {
        id: (seed) => copycat.uuid(seed),
        version: (seed) => copycat.uuid(seed),
        metadata: {},
      },
    },
    episodes: {
      data: {
        guest_name: (seed) => copycat.fullName(seed),
      },
    },
  },
});

// clears all existing data in the database, but keep the structure
await snaplet.$resetDatabase();

// seed "public" schema.
await snaplet.$pipe([
  snaplet.episodes((x) =>
    x(3, (idx) => ({ index: idx + 1, title: `Episode ${idx + 1}` }))
  ),
  snaplet.actions((x) => x(50), { autoConnect: true }),
]);

// seed "storage" schema.
await snaplet.$pipe([
  snaplet.buckets((x) =>
    x(1, () => ({ name: "thumbnails", id: "thumbnails" }))
  ),
  snaplet.objects(
    (x) =>
      x(10, (idx) => ({
        name: `episode${idx}`,
        path_tokens: [`episodes${idx}`],
      })),
    {
      autoConnect: true,
    }
  ),
]);
